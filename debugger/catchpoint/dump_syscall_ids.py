import os
import sys

HEADER_FILE = '/usr/include/x86_64-linux-gnu/asm/unistd_64.h'

DEFINITION_PREFIX = '#define __NR_'

OUTPUT_HEADER = """// Auto-generated by dump_syscall_id.py.  Do not modify.

package catchpoint

import (
  "fmt"
)

type SyscallId struct {
  Name string
  Number int
}

func SyscallIdByNumber(num int) (SyscallId, bool) {
  for _, id := range syscallIds{
    if id.Number == num {
      return id, true
    }
  }

  return SyscallId{
    Name: fmt.Sprintf("unknown_syscall_num_%d", num),
    Number: num,
  }, false
}

func SyscallIdByName(name string) (SyscallId, bool) {
  for _, id := range syscallIds{
    if id.Name == name {
      return id, true
    }
  }

  return SyscallId{
    Name:   fmt.Sprintf("unknown_syscall_name_%s", name),
    Number: -1,
  }, false
}

func (id SyscallId) String() string {
  return id.Name
}
"""

def print_ids(syscalls):
  print('var syscallIds = []SyscallId{')
  for name, number in syscalls.items():
    print('  {')
    print('    Name:   "' + name + '",')
    print('    Number: ' + number + ',')
    print('  },')
  print('}')

def main():
  syscalls = {}
  for line in open(HEADER_FILE):
    _, _, line = line.strip().partition(DEFINITION_PREFIX)
    if not line:
      continue

    name, _, number = line.partition(' ')
    syscalls[name] = number

  print(OUTPUT_HEADER)
  print_ids(syscalls)

if __name__ == '__main__':
  main()
